#[derive(Debug, PartialEq, Eq, Hash, Clone)]
pub enum Class {
    Num,
    Lit,
    Id,
    Comentario,
    Eof,
    Opr,
    Rcb,
    Opm,
    Abp,
    Fcp,
    Ptv,
    Inicio,
    Varinicio,
    Varfim,
    Escreva,
    Leia,
    Se,
    Entao,
    Fimse,
    Repita,
    Fimrepita,
    Fim,
    Erro,
    Vir,
    Ignorar,
    Inteiro,
    Literal,
    Real,
}

impl Class {
    pub fn from_lexeme(lexeme: &str) -> Option<Class> {
        match lexeme {
            "num" => Some(Class::Num),
            "lit" => Some(Class::Lit),
            "id" => Some(Class::Id),
            "comentario" => Some(Class::Comentario),
            "eof" => Some(Class::Eof),
            "opr" => Some(Class::Opr),
            "rcb" => Some(Class::Rcb),
            "opm" => Some(Class::Opm),
            "ab_p" => Some(Class::Abp),
            "fc_p" => Some(Class::Fcp),
            "pt_v" => Some(Class::Ptv),
            "inicio" => Some(Class::Inicio),
            "varinicio" => Some(Class::Varinicio),
            "varfim" => Some(Class::Varfim),
            "escreva" => Some(Class::Escreva),
            "leia" => Some(Class::Leia),
            "se" => Some(Class::Se),
            "entao" => Some(Class::Entao),
            "fimse" => Some(Class::Fimse),
            "repita" => Some(Class::Repita),
            "fimrepita" => Some(Class::Fimrepita),
            "fim" => Some(Class::Fim),
            "erro" => Some(Class::Erro),
            "vir" => Some(Class::Vir),
            "ignorar" => Some(Class::Ignorar),
            "inteiro" => Some(Class::Inteiro),
            "literal" => Some(Class::Literal),
            "real" => Some(Class::Real),
            _ => None,
        }
    }

    pub fn to_str(class: Option<Class>) -> String {
        match class {
            Some(Class::Num) => String::from("num"),
            Some(Class::Lit) => String::from("lit"),
            Some(Class::Id) => String::from("id"),
            Some(Class::Comentario) => String::from("comentario"),
            Some(Class::Eof) => String::from("eof"),
            Some(Class::Opr) => String::from("opr"),
            Some(Class::Rcb) => String::from("rcb"),
            Some(Class::Opm) => String::from("opm"),
            Some(Class::Abp) => String::from("ab_p"),
            Some(Class::Fcp) => String::from("fc_p"),
            Some(Class::Ptv) => String::from("pt_v"),
            Some(Class::Inicio) => String::from("inicio"),
            Some(Class::Varinicio) => String::from("varinicio"),
            Some(Class::Varfim) => String::from("varfim"),
            Some(Class::Escreva) => String::from("escreva"),
            Some(Class::Leia) => String::from("leia"),
            Some(Class::Se) => String::from("se"),
            Some(Class::Entao) => String::from("entao"),
            Some(Class::Fimse) => String::from("fimse"),
            Some(Class::Repita) => String::from("repita"),
            Some(Class::Fimrepita) => String::from("fimrepita"),
            Some(Class::Fim) => String::from("fim"),
            Some(Class::Erro) => String::from("erro"),
            Some(Class::Vir) => String::from("vir"),
            Some(Class::Ignorar) => String::from("ignorar"),
            Some(Class::Inteiro) => String::from("inteiro"),
            Some(Class::Literal) => String::from("literal"),
            Some(Class::Real) => String::from("real"),
            None => String::from("Null"),
        }
    }
}
